From 04765936a0a8dd3ac3f530786fce6b5cea826d3e Mon Sep 17 00:00:00 2001
From: Roger Zanoni <rzanoni@igalia.com>
Date: Wed, 24 Feb 2021 13:50:27 +0100
Subject: [PATCH] [skia][build] fix skia no_sanitize build issues for gcc

Based on https://src.fedoraproject.org/rpms/chromium/blob/rawhide/f/chromium-skia-no_sanitize.patch

---
 .../skia/include/private/SkFloatingPoint.h    | 24 +++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/src/third_party/skia/include/private/SkFloatingPoint.h b/src/third_party/skia/include/private/SkFloatingPoint.h
index 110dda2ae4..8223e9b57d 100644
--- a/src/third_party/skia/include/private/SkFloatingPoint.h
+++ b/src/third_party/skia/include/private/SkFloatingPoint.h
@@ -159,7 +159,15 @@ static inline int64_t sk_float_saturate2int64(float x) {
 // Cast double to float, ignoring any warning about too-large finite values being cast to float.
 // Clang thinks this is undefined, but it's actually implementation defined to return either
 // the largest float or infinity (one of the two bracketing representable floats).  Good enough!
+#if defined(__GNUC__) && __GNUC__ >= 8
+__attribute__((no_sanitize("float-cast-overflow")))
+#else
+# if defined(__GNUC__)
+__attribute__((no_sanitize_undefined))
+# else
 [[clang::no_sanitize("float-cast-overflow")]]
+# endif
+#endif
 static inline float sk_double_to_float(double x) {
     return static_cast<float>(x);
 }
@@ -226,12 +234,28 @@ static inline float sk_float_rsqrt(float x) {
 // IEEE defines how float divide behaves for non-finite values and zero-denoms, but C does not
 // so we have a helper that suppresses the possible undefined-behavior warnings.
 
+#if defined(__GNUC__) && __GNUC__ >= 8
+__attribute__((no_sanitize("float-divide-by-zero")))
+#else
+# if defined(__GNUC__)
+__attribute__((no_sanitize_undefined))
+# else
 [[clang::no_sanitize("float-divide-by-zero")]]
+# endif
+#endif
 static inline float sk_ieee_float_divide(float numer, float denom) {
     return numer / denom;
 }
 
+#if defined(__GNUC__) && __GNUC__ >= 8
+__attribute__((no_sanitize("float-cast-overflow")))
+#else
+# if defined(__GNUC__)
+__attribute__((no_sanitize_undefined))
+# else
 [[clang::no_sanitize("float-divide-by-zero")]]
+# endif
+#endif
 static inline double sk_ieee_double_divide(double numer, double denom) {
     return numer / denom;
 }
-- 
2.30.1

